Version 3.000
	Requirements
		Update the "M5DxGpuMemoryUploadBuffer" to support putting data on the "Gpu default buffer".
			For data that does not change, this buffer is more 	efficient. For example, the 
			geometry for a chair does not change so it can use this new constructor. 
			The location of the chair will use the existing class M5DxGpuMemoryUploadBuffer 
			constructor because the location of the chair can change.
		Add support for other types of scene objects beyond the single triangle. 
			The other geometry will be from external files using the ".obj" format.	
		Move to Visual Studio 2019. 
		
	
	
Steps to go from Version 2.000 to Version 3.000 

	The ToDo list is from top down for the student.		

	ToDo - Add another constructor to the M5DxGpuMemoryUploadBuffer class that will 
		be used for "Gpu Default buffer" buffer storage.
		
		The details of how to do this work is documented in the new class and the 
		new constructor.
		
	ToDo - We will create a new static function in the M5TriFactory that will use the new "Gpu 
		Default buffer" constructor in the M5DxGpuMemoryUploadBuffer class. 
		This static function will also take in a std::string local file path to an ".obj" file. 
		The ".obj" file format is used to store geometry shapes. It contains all the vertex and 
		index information needed to create the shape.
		
		Create a static function in the M5TriFactory class with the following signature.
		std::unique_ptr<M5TriCpuGpuResources> M5TriFactory::GetTriangleSetResourcesForObjFile(
			ID3D12Device& vrID3D12Device, M5DxGpuCommand& vrM5DxGpuCommand, 
			std::string& vrObjFilePathDirectory,
			std::string& vrObjFileName);
		
		Notice the three additional parameters, one for the M5DxGpuCommand object and two for the file 
			path and name.
		
	ToDo - Find the obj loader code.
		
		We will use an open source project called "Tiny Object Loader". It can be found on git 
		hub at https://github.com/syoyo/tinyobjloader.
		
		The only 2 files needed, the "tiny_obj_loader.h" and "tiny_obj_loader.cc". Make sure to 
		include the MIT license info for this source in your own github site if you are going 
		to publish. I renamed the "tiny_obj_loader.cc" to have an extention of ".cpp".
		
		ToDo - Create a static library in your visual studio solution for these two files. 
		
			Like the other projects, create a folder "src". Place both the files in this directory 
			and add them to the project. You could also create the files in the project and copy 
			in the content by simple copy and paste.
			
			ToDo - Compile this new static lib project.
		
		ToDo - Link to the other projects in the solution.
			You will need to update your Matthew5 projects so they can see the header file and also 
			link. If you are not sure how to setup and link a static library project see this lesson.
			https://github.com/davants/JesusIsLord/blob/master/Lessons/Cpp/CppVisualStudioLinkingProjects.txt
		
			At a high level:
				Set the tinyobjloader to be a static library.
				
				Set all client projects that use this static library by setting their properties so 
					they can see the tiny_obj_loader.h header file.
					In the properties dialog: C/C++->General->Additional Include Directories 
						Add the following: $(SolutionDir)tinyobjloader\src
					This must be done for Matthew5Graphics, Matthew5GraphicsOculus and the 
					Matthew5 exe.
					
				Right click the Matthew5 exe and select "Add" and then "Reference", then chose the 
					tinyobjloader project.
					
			
		ToDo - Add an include statement for the "tiny_obj_loader.h" to the "M5TriFactory.h" file.
			If you have update the project properties correctly then adding this include will not 
			cause an error. Compile and run. Of course we are not using the tinyobjloader yet but 
			compiling will test all our project settings are correct.
			
		ToDo - Add the following code to the definition of GetTriangleSetResourcesForObjFile.
			
			tinyobj::attrib_t vAttrib;
			std::vector<tinyobj::shape_t> vShapesList;
			std::vector<tinyobj::material_t> vMaterialsList;
			std::string vWarning;
			std::string vError;

			bool vLoadResult = tinyobj::LoadObj(&vAttrib, &vShapesList, &vMaterialsList, &vWarning, &vError,
				vrObjFileName.c_str(),
				vrObjFilePathDirectory.c_str());				

			if (!vError.empty()) {
				return nullptr;
			}

			if (vShapesList.size() == 0)
			{
				return nullptr;
			}

			tinyobj::shape_t& vrShape = vShapesList[0];

			return std::unique_ptr<M5TriCpuGpuResources>();
	
		ToDo - Compile to make sure things are linking correctly. If your "tinyobj::LoadObj" takes 
			different parameters then you have have a different version of the tinyobjloader.
			You can either update the code as needed or use the tinyobjloader files from the 
			Matthew5 github.
						
		
		ToDo - In the Matthew5 Version 3 source there are some new obj files for testing.
			In the solution directory there is a new sub-directory named Matthew5ObjFiles. In this 
			directory you will see files that contain the geometry for 2 new shapes. One is 
			a box and the other is an odd shaped box called "Elephant". Each geometry shape 
			is defined in 2 files; the ".obj" file and the corresponding ".mtl" file.
			These shapes were created in Blender, a free 3D graphics developement environment.
			https://www.blender.org/
			
			In the Matthew5ObjFiles directory there is also a file named "BlenderExportInstructions.txt" 
			which contains the export settings used for these two geometry exports.
			
			Create the Matthew5ObjFiles directory in your solution directory and copy over all 4 files.
				box.obj, box.mtl, Elephant.obj, Elephant.mtl 
				
				NOTE!! On github the "Elephant.obj" file has been renamed to "Elephant.obj_REMOVE_THIS". 
					This is because visual studio also has obj files and we don't want them on github.
					So, to get the "Elephant.obj" file to upload to github I had to change its extension 
					from ".obj" to ".obj_REMOVE_THIS". After downloading from github you will need to 
					change it back.
				
		ToDo - We want to be able to add geometry files to this directory at any time and use 
			them. However, the Matthew5 application could be located anywhere on the computer 
			so we need a mechanism to find the "Matthew5ObjFiles" directory.
			Fortunatly, we already have this component, the M5Util class utility.
			In Matthew5 Version 3 source, there is an update to the M5Util class.
			Download the lateest version because it supports finding a file path 
			using a std::string as well as std::wstring.
			
		ToDo - Now we can update the Matthew5Dx::AddSceneObject function to use the "Elephant" 
			box geometry. We will use the new M5TriFactory::GetTriangleSetResourcesForObjFile function 
			we created above. This function need additional parameters like the full directory path 
			and the file name. We need 2 std::string's, one for the full directory path and one for 
			the file name "Elephant.obj". 
			
			BEFORE this code that loops 4 times:
				for (int i = 0; i < 4; i++)
				{ 
					...
					
			Add the following code, before the "for loop", that will find the full path to the 
			"Elephant.obj" file.
			
			CODE:
				// Hard coded file name. In a later version of Matthew5 this can be changed.
				std::string vFileName = "ElephantBox.obj";
				// Directory to search for. 
				std::string vObjFileDirectory = "Matthew5ObjFiles";
				// Create relative path to the file.
				std::string vRelFilePath = vObjFileDirectory + "\\" + vFileName;
				// Use search util function to get the full path to the file.
				std::string vRelFilePathSearch = M5Util::FindFullPath(vRelFilePath);
				// Validate it was found.
				if (vRelFilePathSearch.length() == 0)
				{
					// Error - file not found.
					return -1;
				}
				// From the full file path, get just the full directory path.
				size_t vStartPosition = vRelFilePathSearch.length() - vFileName.length();
				std::string vFullDirectoryPath = vRelFilePathSearch.replace(
					vStartPosition, vFileName.length(), "");
				
			Now, INSIDE this code that loops 4 times:
				for (int i = 0; i < 4; i++)
				{ 
					...		
			Comment out the old code that create the geometry as a single triangle and 
			add new code that uses our new M5TriFactory::GetTriangleSetResourcesForObjFile
			function.
			CODE: 
				//vpSimpleM5SceneObjectTriangle->SetM5TriCpuGpuResources(
				//	M5TriFactory::VER3_TEMP_GetTriangleSetResourcesForSimpleTriangle(
				//		mpM5DxGpuDeviceNFactory->GetID3D12Device(), *mpM5DxGpuCommand));

				vpSimpleM5SceneObjectTriangle->SetM5TriCpuGpuResources(
					M5TriFactory::GetTriangleSetResourcesForObjFile(
						mpM5DxGpuDeviceNFactory->GetID3D12Device(), *mpM5DxGpuCommand,
						vFullDirectoryPath, vFileName	));
				
		ToDo - Compile.
			Note that this will not work yet. We have one other thing to do.
		
		ToDo - Update the command list call to DrawIndexedInstanced(...).
			When we call "Draw...", adding the draw command to the command list, we currently are 
			hard coding the number of indicies. We hard code to 3. However, we now have many more 
			indicies than just 3.
			The DirectX command "DrawInstanced" takes as a first parameter the number if indicies 
			that should be used to draw. For each geometry we know the Gpu indicies buffer size in 
			bytes. We can also get the number of bytes used for each index value because we used 
			the data type int16_t. We can use the C++ pre-compiler function "sizeof" to get the 
			number of bytes per index. The number of bytes in the indicies buffer divided by 
			the size of an individual index give the number of indicies.
			
			In the function Matthew5DxDesktop::DrawSceneObjects, 
			replace the CODE 
				vpCommandList->DrawInstanced(3, 1, 0, 0);
			with CODE
				vpCommandList->DrawIndexedInstanced(vrM5SceneObject.GetM5TriCpuGpuResources().GetGpuIndexBufferView().SizeInBytes / sizeof(int16_t), 1, 0, 0, 0);

			If you are doing the Oculus code as part of your project, the same change to 
			DrawIndexedInstanced(..) is needed, but in the Matthew5DxOculus::Draw function. 
			No other Oculus changes are needed for this version because we were working in the base 
			class "Matthew5Dx" for most of our changes for this version.
				
		ToDo - Compile.
			You can run but all the "Elephant" boxes run together.
			
		ToDo - One last set of changes is to the exe win main function so that the Elephant boxes 
			don't run together as much. We will only output a total of 4 and we will change the spacing a bit.
			Also, we will change the draw instruction's "Look At" for the z value to be very far off 
			in the distance. 
			New win main code.
			CODE:
				int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE prevInstance, PSTR cmdLine, int showCmd)
				{
					// Create windows wrapper which provides one window.
					int vWidth = 800, vHeight = 600;
					Matthew5Windows vMatthew5Windows(hInstance, vWidth, vHeight);

					// This will point to Oculus or Desktop; however, the interface does not care.
					std::unique_ptr<IMatthew5Graphics> vpIMatthew5Graphics = ChooseOculusOrDesktop(vMatthew5Windows.GetHWND());

					// Add a scene object.
					M5SceneObjectCpuPosition vM5SceneObjectCpuPosition;
					vM5SceneObjectCpuPosition.mPositionX = 2.1f;
					vM5SceneObjectCpuPosition.mPositionY = -1.1f;
					vM5SceneObjectCpuPosition.mPositionZ = -2.5f;
					vpIMatthew5Graphics->AddSceneObject(vM5SceneObjectCpuPosition);

					// Add 3 more.
					for (int i = 0; i < 3; i++)
					{
						vM5SceneObjectCpuPosition.mPositionX = -3.1f;
						vM5SceneObjectCpuPosition.mPositionY = -1.1f;
						vM5SceneObjectCpuPosition.mPositionZ = -3.8f + (i * 10);
						vpIMatthew5Graphics->AddSceneObject(vM5SceneObjectCpuPosition);

					}

					IMatthew5DrawInstructions vIMatthew5DrawInstructions;

					// We will keep the "Camera Look At" the same for now.. which is 1000 units in
					// the forward direction.
					vIMatthew5DrawInstructions.GetCameraLookAt().mPositionZ = -1000.0f;

					while (true)
					{
						Matthew5WindowsUserHoldingKeys & vUserInput = vMatthew5Windows.GetWindowsMessages();

						if (vUserInput.CharHit('W'))
						{
							// Move Forwards, reduce the z.
							// Right Handed Coordinates means larger z is backward; so to move camera forward reduce the z.
							vIMatthew5DrawInstructions.GetCameraPosition().mPositionZ -= 0.01f;
						}
						else if (vUserInput.CharHit('S'))
						{
							// Move Backwards, increase the z.
							// Right Handed Coordinates means larger z is backward; so to move camera backward increase the z.
							vIMatthew5DrawInstructions.GetCameraPosition().mPositionZ += 0.01f;
						}

						vpIMatthew5Graphics->Draw(vIMatthew5DrawInstructions);

						if (vUserInput.CloseProgram == true)
						{
							break;
						}
					}
					return 0;
				}
			
		ToDo - Compile.
			You should now see the new odd shaped Elephant boxes.
	
			